import random #for comparison purposes

#pip install matplotlib
import matplotlib.pyplot as plt
import numpy as np

from MyOwnRNG import *

def distribution(num, dmin, dmax, mode = "display",):
    if mode == "print":
        #init dictionaries to store the results of the test
        myRandomFunctionDict= {}
        randintDict = {}

        for i in range(dmin, dmax + 1):
            myRandomFunctionDict[i]= 0
            randintDict[i]= 0
        myRandomFunctionDict['total'] = 0
        randintDict['total'] = 0

    elif(mode == "display"):
        myRandomList = []
        randintList = []
    else:
        raise Exception("Mode not valid")
    
    #loop to run my random number generator and the built in random number generator and log the results of each
    for i in range(num):
        if mode == "print":
            #totals up the number of occurances of each interger generated by each generator
            myRandomFunctionDict[int(randomNumberMinMax(dmin, dmax))] += 1
            myRandomFunctionDict["total"] += 1
            randintDict[random.randint(dmin, dmax)] += 1
            randintDict["total"] += 1
        elif(mode == "display"):
            myRandomList.append(int(randomNumberMinMax(dmin, dmax)))
            randintList.append(random.randint(dmin, dmax))
        else:
            raise Exception("Mode not valid")


        #loading percent
        print(str(int(i/num * 100)) + "%", end="\r")
    if mode == "print":
        return myRandomFunctionDict, randintDict
    elif(mode == "display"):
        return myRandomList, randintList
    else:
        raise Exception("Mode not valid")
'''
MatPlotLib Histogram https://matplotlib.org/3.5.0/gallery/statistics/hist.html
adpated from https://matplotlib.org/stable/plot_types/stats/hist_plot.html#sphx-glr-plot-types-stats-hist-plot-py
'''
def graphMaker(dictOrList, name, dmin, dmax, color = "blue"):
    plt.style.use('_mpl-gallery')
    x = []
    fig, ax = plt.subplots()

    if type(dictOrList) == dict:
        data = []
        for i in range(dmin, dmax):
            data.append(dictOrList[i])
        x = data
        ax.set(xlim=(dmin, dmax), xticks=np.arange(dmin, dmax + 1), ylim=(0, int(.2 * dictOrList["total"])), yticks=np.linspace(0, int(.2 * dictOrList["total"]), 9))
    elif type(dictOrList) == list:
        x = dictOrList
        ax.set(xlim=(dmin, dmax), xticks=np.arange(dmin, dmax + 1), ylim=(0, int(.2 * len(dictOrList))), yticks=np.linspace(0, int(.2 * len(dictOrList)), 9))
    else:
        raise Exception("Invalid Mode")

    ax.hist(x, bins= dmax-dmin + 1, linewidth=0.5, edgecolor="white", color = color)
    
    plt.title(name)
    plt.ylabel("Frequency")

    plt.tight_layout()

    return plt


if __name__ == "__main__":

    #sets the range for the random number generators, must be positive integers
    thismin, thismax = 1,10

    mine, builtin = distribution(400, thismin, thismax, "print")
    print("my generator      ", mine)
    print("built in generator", builtin)

    mine, builtin = distribution(4000, thismin, thismax, "display")
    graphMaker(mine, "My Generator", thismin, thismax).show()
    graphMaker(builtin, "Built in Generator", thismin, thismax, "red").show()
    